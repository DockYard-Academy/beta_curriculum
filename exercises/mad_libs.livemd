# Mad Libs

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Startup Madlib

In this exercise, you're going to recreate the following madlib game. A madlib is a game where the player
can enter in a word or sentence to fill in the blanks.

![](images/madlib.jpg)

<!-- livebook:{"break_markdown":true} -->

In the Elixir cell below, Create replace `nil` for each blank in the madlib.
Then use those variables with string concatenation `<>` to create the `madlib`.

```elixir
name_of_company = nil
a_defined_offering = nil
a_defined_audience = nil
solve_a_problem = nil
secret_sauce = nil

madlib = nil

Utils.feedback(:startup_madlib, [
  madlib,
  name_of_company,
  a_defined_offering,
  a_defined_audience,
  solve_a_problem,
  secret_sauce
])
```

## Nature Show Madlib

In the Elixir cell below, create a variable for each of the blanks in the following madlib.
Then use those variables to create a mad lib, but this time use string interpolation `#{}`.

![](images/nature_show_madlib.png)

Replace `nil` with your complete madlib.

```elixir
animal = nil
country = nil
plural_noun = nil
a_food = nil
type_of_screen_device = nil
noun = nil
verb1 = nil
verb2 = nil
adjective = nil

madlib = nil

Utils.feedback(:nature_show_madlib, [
  animal,
  country,
  plural_noun,
  a_food,
  type_of_screen_device,
  noun,
  verb1,
  verb2,
  adjective,
  madlib
])
```
