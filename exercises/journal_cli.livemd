# Journal CLI

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Setup

Ensure you run the `ea` command to evaluate all Elixir cells before starting. Alternatively,
you can evaluate the Elixir cells as you read.

## Journal CLI

We're going to create a Journal Command Line Interface Application.

You can see the `demo_projects/journal` project if you get stuck or need an example.
We recommend that you do as much as you can without looking at the example first.

This project demonstrates how to create a command line executable application.

For example, running the following in
the command line from the project folder will create a new markdown file `yyyy-mm-dd.md` (matching today's date).

```
./journal
```

## Create a New Mix Project

Using the command line, create a new project in the `projects` folder called `journal_cli`.

```
mix new journal
```

<!-- livebook:{"break_markdown":true} -->

Evaluate the cell below to ensure you have correctly created the project.

```elixir
Utils.feedback(:created_project, "journal_cli")
```

## Configure The Project For The Command Line

We want to be able to use the command line to execute this project.

Command line applications run the `main/1` function on a configured module.

First, add a `main/1` function to the `Journal` module in `journal.ex`. We're going to
leave it with a blank `IO.inspect/2` for now.

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
def main(args) do
  IO.inspect(args)
end
```

For a command line application, we need to tell Mix which module to run.
Configure the `:escript` option with the `:main_module`. Tell Mix to use the `Journal` module in `mix.exs`.

<!-- livebook:{"break_markdown":true} -->



```elixir
def project do
  [
    app: :journal,
    version: "0.1.0",
    elixir: "~> 1.13",
    start_permanent: Mix.env() == :prod,
    deps: deps(),
    # Added this line
    escript: [main_module: Journal]
  ]
end
```

Under the hood, Elixir builds an executable file called an **escript**. This escript can be invoked from the command
line directly rather than using the IEx Shell.

Run the following in the command line from the project folder to build the executable file.
To pick up future changes, you will need to re-run this command.

```
mix escript.build
```

Execute the file with:

```
./journal
```

You should see it print an empty list. That's because we haven't passed in any arguments.

```
[]
```

Pass in arguments to see them in the list.

```
./journal argument1 argument2 --switch
["argument1", "argument2", "--switch"]
```

## Create a Daily Journal

Now that we can run the `Journal.main` function through the command line, let's define the desired behavior
of the Journal CLI when we run:

```
./journal
```

By default, the Journal CLI should create a markdown file under todays date in the `test_entries` folder matching the format `YYYY-MM-DD.md`.

You can use the following to get today's date. Don't worry if `utc` time doesn't match your timezone's date.

```elixir
Calendar.strftime(Date.utc_today(), "%y-%m-%d.md")
```

If the `test_entries` folder does not already exist, it should also create the folder.

The files contents should be blank except for a title matching todays date.

```md
# yyyy-mm-dd
```

Implement the `Journal.main/1` function when given no arguments.

## Add the --folder switch

Command line applications use **switches** to alter functionality.
You've already used a switch whenever you make a git commit.

```
git commit -m "my example commit"
```

`-m` is just an alias for `message`. So you could also use:

```
git commit --message "my example commit".
```

We're going to create a `--folder` switch which will override the default `test_entries` folder.
For example, the following will create a new file in the `example_folder`.

```
./journal --folder example_folder
```

We can use the built-in [OptionParser](https://hexdocs.pm/elixir/OptionParser.html) module to parse switches.
Specify the `:switches` in a keyword list with their values. For example, a `--folder` switch could be handled with:

```elixir
# journal.ex
def main(args) do
  options = [switches: [folder: :string]]
  {opts, _, _} = OptionParser.parse(args, options)
  IO.inspect(opts)
end
```

Now `opts` for the following command would be: `[folder: "example"]`.

```
./journal --folder example_folder
```

Implement the `--folder` switch to store journal entries in a different folder.
Continue to use `test_entries` if the `--folder` switch is not provided.

## Add the --file switch

Implement the `--file` switch, which should override the default file name.

So the following would create a new file `test.md`.

```
./journal --file test
```

## Add the --title switch

Implement the `--title` switch, which should override the default file title.

So the following would create a new file `test.md`.

```
./journal --file test --title "My Title"
```

With the following content:

```md
# My Title
```

## Use the --template switch

Test and implement the `--template` switch.

The template flag should allow users to use any custom template in a `templates` folder like so:

```
./journal --template bullet_journal
```

Where `templates/bullet_journal.md` is a markdown file with the following content:

```md
<!-- in templates/bullet_journal.md -->
# Bullet Journal
I am grateful for
- 
- 
- 

Today I will
- 
- 
- 
```

## Handle An Existing Daily Journal

Use `Logger.error` to warn the user if they already have an existing daily journal or journal with the same name.
```
Error, daily journal already exists. Open test_entries/yyyy-mm-dd.md to see todays journal.
```

## Provide Custom Values in Templates

If a template defines some content in the format `{DATE}`,
replace that content with todays date.

If a template defines some content in the format `{TITLE}` replace that value
with the `--title` switch if it exists. If it does not exist, replace the `{TITLE}` with an empty string.

For example:

```md
# {TITLE}
Created on {DATE}
```

When provided `--title "My Title"` Would become:

```md
# My Title
Created on 2022-04-06
```

## (Bonus) Search Entries

Implement a `search` command you can use to find files who's file name contains the searched string.

```
./journal search "example"
example_file1.md
example_file2.md
```

Use `Logger.info` to print the file name.