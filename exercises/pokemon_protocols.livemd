# Pokemon Protocols

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Overview

Pokemon are creatures which have the ability to evolve into more powerful versions of
themselves.

For example, charmander evolves into charmander, and charmeleon evolves into charizard.

```mermaid
flowchart LR
  c1[Charmander]
  c2[Charmeleon]
  c3[Charizard]
  c1 --> c2 --> c3
```

In this exercise, you will create an `Evolvable` protocol which returns the evolved
version of a pokemon.

<!-- livebook:{"force_markdown":true} -->

```elixir
Evolvable.evolve(%Charmander{})
%Charmeleon{hp: 58, attack: 64: defense: 58}
```

## Pokemon Structs

In the Elixir cell below, Using the stats from [Pokemon DB](https://pokemondb.net/pokedex), you're going to create a struct
that represents each of the following pokemon.

* [Charmander](https://pokemondb.net/pokedex/charmander)
* [Charmeleon](https://pokemondb.net/pokedex/charmeleon)
* [Charizard](https://pokemondb.net/pokedex/charizard)

Each struct should include the following.

* `:hp`
* `:attack`
* `:defense`

You can use the base values as defaults from Pokemon DB as
shown in the following diagram.

<!-- livebook:{"break_markdown":true} -->

```mermaid
classDiagram
  class Charmander {
    hp: 39
    attack: 52
    defense: 43
  }

  class Charmeleon {
    hp: 58
    attack: 64
    defense: 58
  }

  class Charizard {
    hp: 78
    attack: 84
    defense: 78
  }
```

```elixir
defmodule Charmander do
end

defmodule Charmeleon do
end

defmodule Charizard do
end

Utils.feedback(:pokemon_evolution_structs, [Charmander, Charmeleon, Charizard])
```

## Evolvable Protocol

In the Elixir cell below, create an `Evolvable` protocol with an `evolve/1` function.

a `Charmander` struct should return a new `Charmeleon` struct.

<!-- livebook:{"force_markdown":true} -->

```elixir
Evolvable.evolve(%Charmander{})
%Charmeleon{hp: 58, attack: 64: defense: 58}
```

a `Charmeleon` struct should return a new `Charizard` struct.

<!-- livebook:{"force_markdown":true} -->

```elixir
Evolvable.evolve(%Charmeleon{})
%Charizard{hp: 78, attack: 84: defense: 78}
```

```elixir
defprotocol Evolvable do
end

Utils.feedback(:evolvable, [Evolvable, Charmander, Charmeleon, Charizard])
```
